<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhao.wtf</id>
    <title>Zhao 的博客</title>
    <updated>2020-07-27T03:21:45.704Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhao.wtf"/>
    <link rel="self" href="https://zhao.wtf/atom.xml"/>
    <logo>https://zhao.wtf/images/avatar.png</logo>
    <icon>https://zhao.wtf/favicon.ico</icon>
    <rights>All rights reserved 2020, Zhao 的博客</rights>
    <entry>
        <title type="html"><![CDATA[不确定输入数量的输入]]></title>
        <id>https://zhao.wtf/post/hZnt9bDhW/</id>
        <link href="https://zhao.wtf/post/hZnt9bDhW/">
        </link>
        <updated>2020-07-27T02:39:02.000Z</updated>
        <summary type="html"><![CDATA[<p>在一小部分题目中，可能不会给出输入数据的个数，而是直接给出所有需要输入的数据。在什么时候结束读入就成了一个问题。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在一小部分题目中，可能不会给出输入数据的个数，而是直接给出所有需要输入的数据。在什么时候结束读入就成了一个问题。</p>
<!-- more -->
<p><a href="http://acwing.com/problem/content/1012/">导弹拦截</a> 一题就是个很好的例子。</p>
<blockquote>
<p><strong>输入格式</strong><br>
共一行，输入导弹依次飞来的高度。<br>
<strong>输入样例</strong><br>
389 207 155 300 299 170 158 65</p>
</blockquote>
<p>解决这个问题有两种思路：</p>
<ol>
<li><strong>从输入数据上判断</strong></li>
<li><strong>从输入语句上判断</strong></li>
</ol>
<h2 id="方法一从输入数据上判断">方法一：从输入数据上判断</h2>
<p>在默认情况下，全局变量的初始值为 <code>0</code> ，只需判断在执行读入操作后变量是否仍为零。</p>
<pre><code class="language-cpp">while(true)
	{
		scanf(&quot;%d&quot;, &amp;a[i]); // cin&gt;&gt; a[i] 也是同样的 
		if(a[i] == 0) break;
		i++;
	}
</code></pre>
<p>但是这个做法有个显著的缺陷，无法使用于数据含 <code>0</code> 的输入，故不推荐这种做法。</p>
<h2 id="方法二从输入语句上判断">方法二：从输入语句上判断</h2>
<p><code>cin</code> 和 <code>scanf</code> 在输入数据后都会有返回值，所以可以通过判断返回值来判断是否成功输入数据。</p>
<p><code>cin</code> 在成功输入数据时会返回非零数，而读入失败则会返回 <code>0</code></p>
<pre><code class="language-cpp">while(cin &gt;&gt; a[n]) n++;
</code></pre>
<p>当 <code>scanf</code> 没有接收到指定格式的变量时，返回值为0，遇到错误或遇到end of file，返回值为EOF（-1）。故正常输入的返回值大于零，错误或结束的输入返回值小于零。</p>
<pre><code class="language-cpp">while(scanf(&quot;%d&quot;, &amp;a[n]) &gt; 0) n++; //由于在 C++ 中非零数均返回 true，而 EOF 值为 -1，也会认为是 true，因此需特判是否大于零。
</code></pre>
<p>这个做法对于含零或不含零的数据都适用，推荐此种做法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luogu P2038 无线网络发射器选址 题解]]></title>
        <id>https://zhao.wtf/post/luogu-p2038-wu-xian-wang-luo-fa-she-qi-xuan-zhi-ti-jie/</id>
        <link href="https://zhao.wtf/post/luogu-p2038-wu-xian-wang-luo-fa-she-qi-xuan-zhi-ti-jie/">
        </link>
        <updated>2020-07-23T04:52:26.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目大意分析">题目大意分析</h3>
<p>在一个 128*128 的矩阵中，每一个点都有一个值，让你选一点 (a,b)，在(x-d,y-d)到(x+d,y+d)中的之和值最大，并求出使之最大的方案数</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目大意分析">题目大意分析</h3>
<p>在一个 128*128 的矩阵中，每一个点都有一个值，让你选一点 (a,b)，在(x-d,y-d)到(x+d,y+d)中的之和值最大，并求出使之最大的方案数</p>
<!-- more -->
<p><a href="https://www.luogu.com.cn/problem/P2038">题目链接</a></p>
<h3 id="思路-1">思路 1</h3>
<p>128*128 的范围直接暴力模拟发射器在每一个点的情况就能轻松解决，但是在计算在(x-d,y-d)到(x+d,y+d)中的之和值时要注意下     边界和范围</p>
<p>好了，话不多说，上代码</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;

using namespace std; 

int d,n,s[130][130];  //定义一个数组s存储每个坐标的值
long long sum,num,z,x1,x2,y2,ya;

int main()
{
    scanf(&quot;%d%d&quot;,&amp;d,&amp;n);

    for(int i=0;i&lt;n;i++)
    {
        int a,b,k;
        scanf(&quot;%d%d%d&quot;,&amp;b,&amp;a,&amp;k); //a点和b点与二维数组的x,y相反要处理下 

        s[a][b]=k; 
    }

    for(int i=0;i&lt;=128;i++) //开始枚举
    {
        for(int j=0;j&lt;=128;j++)
        {
            z=0; //先清空

            if(i-d&lt;0) x1=0; //判断纵坐标起点
            else x1=i-d;    

            if(i+d&gt;128) x2=128; //判断纵坐标终点
            else x2=i+d;    

            if(j-d&lt;0) ya=0; //判断横坐标起点
            else ya=j-d;    

            if(j+d&gt;128) y2=128; //判断横坐标终点
            else y2=j+d;

            for(int a=x1;a&lt;=x2;a++)   //对公共场所数量累加
                for(int b=ya;b&lt;=y2;b++)
                    z+=s[a][b]; 

            if(z&gt;sum) //如果大于前一个值则替换
            {
                sum=z;
                num=1;
            }
            else if(sum==z) //如果相等则数量自加
                    num++;
        }
    }

    printf(&quot;%lld %lld&quot;,num,sum); //输出

    return 0;
}
</code></pre>
<h3 id="思路-2">思路 2</h3>
<p>时隔一年，再次看到这道题又有了另一种思路。</p>
<p>显然，我们希望一个发射器能够覆盖尽可能多的公共场所，也就是贪心思想。但是发射器只能覆盖以该点为中心，边长为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>d</mi></mrow><annotation encoding="application/x-tex">2d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">d</span></span></span></span> 的正方形。因此，<strong>一个路口的公共场所只能被在一定的范围内的发射器覆盖</strong>。当有多个路口能被覆盖的范围存在交集时，则选择值最大的那一个。</p>
<p>在代码实现上，只需开一个数组，把每一个路口能被覆盖的范围的坐标的值依次加上路口的公共场数量，然后遍历数组找最大值。</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;queue&gt;
#include &lt;algorithm&gt;

using namespace std;

int a[131][131],d,n,ans,Max=-1;

void f(int x,int y,int z)  //进行赋值操作
{
    int t=d;
    for(int i=x;(i&gt;=x-t)&amp;&amp;(i&gt;=0);i--)
        for(int j=y;(j&gt;=y-t)&amp;&amp;(j&gt;=0);j--)
            a[i][j]+=z;

    for(int i=x+1;(i&lt;=x+t)&amp;&amp;(i&lt;=128);i++)
        for(int j=y;(j&gt;=y-t)&amp;&amp;(j&gt;=0);j--)
            a[i][j]+=z;
    
    for(int i=x;(i&gt;=x-t)&amp;&amp;(i&gt;=0);i--)
        for(int j=y+1;(j&lt;=y+t)&amp;&amp;(j&lt;=128);j++)
            a[i][j]+=z;
    
    for(int i=x+1;(i&lt;=x+t)&amp;&amp;(i&lt;=128);i++)
        for(int j=y+1;(j&lt;=y+t)&amp;&amp;(j&lt;=128);j++)
            a[i][j]+=z;
}

int main()
{
    memset(a,0,sizeof(a));
    scanf(&quot;%d%d&quot;,&amp;d,&amp;n);
    for(int i=0;i&lt;n;i++)
    {
        int x,y,z;
        scanf(&quot;%d%d%d&quot;,&amp;x,&amp;y,&amp;z);
        f(y,x,z);  
    }

    for(int i=0;i&lt;=128;i++)    //找出最大值并同时找出出现次数
        for(int j=0;j&lt;=128;j++)
        {
            if(a[i][j]&gt;Max)
            {
                Max=a[i][j];
                ans=1;
                continue;
            }
            if(a[i][j]==Max)
                ans++;
        }

    /*for(int i=0;i&lt;=10;i++)     //注释部分可打出数组进行观察
    {
        for(int j=0;j&lt;=10;j++)
            printf(&quot;%d &quot;,a[i][j]);
        printf(&quot;\n&quot;);
    }*/
    printf(&quot;%d %d&quot;,ans,Max);
        
    return 0;
}
</code></pre>
<p>方法二比方法一在时间复杂度上有所减小，对比一下在同一时间洛谷评测的用时，就不再过多分析</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.luogu.com.cn/upload/pic/71390.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>